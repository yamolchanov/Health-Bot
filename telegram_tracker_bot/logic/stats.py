"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
 –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–§—É–Ω–∫—Ü–∏–∏:
- format_timedelta(hours: float) -> str:
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å—ã –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–ß–ß:–ú–ú".

- get_weekly_stats_text(user_id: int) -> str:
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–Ω–∞, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

- get_data_for_advice(user_id: int) -> dict:
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ,
    –ø—Ä–∏–≥–æ–¥–Ω–æ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ò–ò-—Å–µ—Ä–≤–∏—Å GigaChat
     –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
- telegram_tracker_bot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- collections.defaultdict –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
"""

from collections import defaultdict
from telegram_tracker_bot.db import get_records_last_n_days


def format_timedelta(hours: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å—ã (float) –≤ —Å—Ç—Ä–æ–∫—É –ß–ß:–ú–ú.

    Args:
        hours (float): –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –≤—Ä–µ–º—è.

    Returns:
        str: –í—Ä–µ–º—è
    """
    total_minutes = int(hours * 60)
    h = total_minutes // 60
    m = total_minutes % 60
    return f"{h:02d}:{m:02d}"


def get_weekly_stats_text(user_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.

    Args:
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é.
    """
    sleep_data = get_records_last_n_days(user_id,
                                         "sleep", 7,
                                         'telegram_tracker_bot'
                                         '/db/tracker_data_base.db')
    calories_data = get_records_last_n_days(user_id, "calories", 7,
                                            'telegram_tracker_bot/'
                                            'db/tracker_data_base.db')
    workouts_data = get_records_last_n_days(user_id, "workouts", 7,
                                            'telegram_tracker_bot/db/'
                                            'tracker_data_base.db')

    report = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"]
    if sleep_data:
        total_sleep = sum(item['hours'] for item in sleep_data)
        avg_sleep = total_sleep / len(sleep_data)
        report.append("üò¥ –°–æ–Ω:")
        report.append(f"  - –í —Å—Ä–µ–¥–Ω–µ–º: {format_timedelta(avg_sleep)} / –Ω–æ—á—å")
        report.append("  - –ó–∞–ø–∏—Å–∏:")
        for entry in sorted(sleep_data, key=lambda x: x['date']):
            report.append(
                f"    - {entry['date']}:"
                f" {format_timedelta(entry['hours'])}"
            )
    else:
        report.append("üò¥ –°–æ–Ω: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")

    report.append("\n")

    if calories_data:
        total_calories = sum(item['amount'] for item in calories_data)
        avg_calories = total_calories / len(calories_data)
        report.append("üçé –ö–∞–ª–æ—Ä–∏–∏:")
        report.append(f"  - –í —Å—Ä–µ–¥–Ω–µ–º: {avg_calories:.0f} –∫–∫–∞–ª / –¥–µ–Ω—å")
        report.append("  - –ó–∞–ø–∏—Å–∏:")
        for entry in sorted(calories_data, key=lambda x: x['date']):
            report.append(f"    - {entry['date']}: {entry['amount']} –∫–∫–∞–ª")
    else:
        report.append("üçé –ö–∞–ª–æ—Ä–∏–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")

    report.append("\n")

    if workouts_data:
        total_duration = sum(item['duration_hours'] for item in workouts_data)
        activities = defaultdict(float)
        for item in workouts_data:
            activities[item['activity_type']] += item['duration_hours']
        report.append("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        report.append(f"  - –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {format_timedelta(total_duration)}")
        report.append("  - –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º:")
        for activity, duration in sorted(activities.items(),
                                         key=lambda item: item[1],
                                         reverse=True):
            report.append(f"    - {activity}: {format_timedelta(duration)}")
    else:
        report.append("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")

    return "\n".join(report)


def get_data_for_advice(user_id: int) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GigaChat.

    Args:
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.
    """
    sleep_data = get_records_last_n_days(
        user_id, "sleep", 7,
        'telegram_tracker_bot/db/tracker_data_base.db')
    calories_data = get_records_last_n_days(
        user_id, "calories", 7,
        'telegram_tracker_bot/db/tracker_data_base.db')
    workouts_data = get_records_last_n_days(
        user_id, "workouts", 7,
        'telegram_tracker_bot/db/tracker_data_base.db')

    simple_sleep = [(d['date'], d['hours']) for d in sleep_data]
    simple_calories = [(d['date'], d['amount']) for d in calories_data]
    simple_workouts = [(d['date'], d['activity_type'],
                        d['duration_hours'])
                       for d in workouts_data]

    return {
        "sleep": simple_sleep,
        "calories": simple_calories,
        "workouts": simple_workouts
    }
