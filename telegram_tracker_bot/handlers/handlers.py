"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
–¥–ª—è Telegram-–±–æ—Ç–∞ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–∫–ª—é—á–∞–µ—Ç:
- –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ (/sleep)
- –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö (/calories)
- –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö (/workout)
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (/stats)
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (/plot)
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò (/advice)
- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (/motivation)
- –ü–æ–º–æ—â—å –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (/start, /help)
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GigaChat.
"""
import logging
import datetime
import re
from sqlite3 import DatabaseError
from typing import Optional
from telegram import Update, InputFile
from telegram.ext import ContextTypes
from telegram_tracker_bot.logic import format_timedelta
from telegram_tracker_bot.db import (add_sleep_record, add_calories_record,
                                     add_workout_record)
from telegram_tracker_bot.logic import (get_weekly_stats_text,
                                        plot_weekly_data,
                                        get_random_motivation)
from telegram_tracker_bot.integrations import get_gigachat_advice

logging.basicConfig(
    format='%(asctime)s'
           ' - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)


def parse_duration(text: str) -> Optional[float]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
        - '–ß–ß:–ú–ú' (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, '02:30')
        - '–ß.–î–ß' (–¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∞—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, '2.5')

    Args:
        text (str): –í—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

    Returns:
        Optional[float]: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö.
    """
    match_colon = re.fullmatch(r'(\d{1,2}):(\d{1,2})', text)
    if match_colon:
        hours = int(match_colon.group(1))
        minutes = int(match_colon.group(2))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            return hours + minutes / 60.0
        return None
    match_decimal = re.fullmatch(
        r'(\d{1,2}(?:[.,]\d+)?)', text.replace(',', '.'))
    if match_decimal:
        try:
            hours = float(match_decimal.group(1))
            if 0 <= hours < 24:
                return hours
            return None
        except ValueError:
            return None
    return None


async def start(update: Update) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
    """
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.name}!"
        " –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "üò¥ /sleep –ß–ê–°–´ - –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω\n (–Ω–∞–ø—Ä–∏–º–µ—Ä /sleep 8:15)\n"
        "üçé /calories –ö–û–õ-–í–û - –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏\n (–Ω–∞–ø—Ä–∏–º–µ—Ä /calories 1800)\n"
        "üí™ /workout –ß–ê–°–´ –ê–ö–¢–ò–í–ù–û–°–¢–¨ - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        " (–Ω–∞–ø—Ä–∏–º–µ—Ä /workout 2:30 –í–æ–ª—å–Ω–∞—è –±–æ—Ä—å–±–∞)\n"
        "üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 7 –¥–Ω–µ–π\n"
        "üìà /plot - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π\n"
        "üí° /advice - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò\n"
        "üöÄ /motivation - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


async def help_command(update: Update,
                       context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE) : –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    _ = context
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/sleep –ß–ê–°–´ - –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω (–Ω–∞–ø—Ä. /sleep 8:15)\n"
        "/calories –ö–û–õ-–í–û - –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ (–Ω–∞–ø—Ä. /calories 1800)\n"
        "/workout –ß–ê–°–´ –ê–ö–¢–ò–í–ù–û–°–¢–¨ - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
        " (–Ω–∞–ø—Ä., /workout 1:30 –ë–µ–≥)\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 7 –¥–Ω–µ–π\n"
        "/plot - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π\n"
        "/advice - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò\n"
        "/motivation - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


async def record_sleep(update: Update,
                       context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞.

    Returns:
        None
    """
    user_id = update.effective_user.id
    today_str = datetime.date.today().strftime('%Y-%m-%d')

    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã."
            " –ü—Ä–∏–º–µ—Ä: /sleep 7.5")
        return

    duration_str = context.args[0]
    hours = parse_duration(duration_str)

    if hours is None or hours <= 0:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞."
            " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä., 8:15)."
            " –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        return

    try:
        add_sleep_record(user_id, today_str,
                         hours,
                         'telegram_tracker_bot/db/tracker_data_base.db')
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ —Å–Ω–µ ({format_timedelta(hours)})"
            f" –Ω–∞ {today_str} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=get_random_motivation())
    except DatabaseError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ –¥–ª—è user %s: %s", user_id, e)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def record_calories(update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞.

    Returns:
        None
    """
    user_id = update.effective_user.id
    today_str = datetime.date.today().strftime('%Y-%m-%d')

    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã."
            " –ü—Ä–∏–º–µ—Ä: `/calories 1800`")
        return

    try:
        amount = int(context.args[0])
        if amount <= 0:
            await update.message.reply_text(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
                )
            return
    except (ValueError, IndexError):
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π."
            " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
        )
        return

    try:
        add_calories_record(user_id,
                            today_str,
                            amount,
                            'telegram_tracker_bot/db/tracker_data_base.db')
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ –∫–∞–ª–æ—Ä–∏—è—Ö ({amount} –∫–∫–∞–ª)"
            f" –Ω–∞ {today_str} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=get_random_motivation())
    except DatabaseError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è user %s: %s", user_id, e)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def record_workout(update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤.

    Returns:
        None
    """
    user_id = update.effective_user.id
    today_str = datetime.date.today().strftime('%Y-%m-%d')

    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /workout –í–†–ï–ú–Ø –¢–ò–ü_–ê–ö–¢–ò–í–ù–û–°–¢–ò"
            "\n–ü—Ä–∏–º–µ—Ä: /workout 1:30 –ë–µ–≥")
        return

    duration_str = context.args[0]
    activity_type = " ".join(context.args[1:]).strip().capitalize()
    duration_hours = parse_duration(duration_str)
    if duration_hours is None or duration_hours <= 0:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
            " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä., 0:45)."
            " –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        return

    if not activity_type:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return

    try:
        add_workout_record(user_id,
                           today_str,
                           duration_hours,
                           activity_type,
                           'telegram_tracker_bot/db/tracker_data_base.db')
        await update.message.reply_text(
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '{activity_type}'"
            f" ({format_timedelta(duration_hours)})"
            f" –Ω–∞ {today_str} –∑–∞–ø–∏—Å–∞–Ω–∞!")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=get_random_motivation())
    except DatabaseError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"
                     " —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è user %s: %s", user_id, e)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_stats(update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE) : –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    _ = context
    user_id = update.effective_user.id
    try:
        stats_text = get_weekly_stats_text(user_id)
        await update.message.reply_text(stats_text, parse_mode='HTML')
    except DatabaseError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                     " –¥–ª—è user %s: %s", user_id, e)
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_plot(update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE) : –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    _ = context
    user_id = update.effective_user.id
    await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")

    try:
        plot_buffer = plot_weekly_data(user_id)
        if plot_buffer:
            await update.message.reply_photo(
                photo=InputFile(
                    plot_buffer,
                    filename=f'stats_{user_id}_{datetime.date.today()}.png'
                ),
                caption="–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
        else:
            await update.message.reply_text(
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π."
                " –ó–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥"
                " /sleep, /calories, /workout.")
    except DatabaseError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                     " –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è user %s: %s", user_id, e)
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫."
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_advice(update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç GigaChat –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE) : –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    _ = context
    user_id = update.effective_user.id
    await update.message.reply_text("üí° –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–æ–≤–µ—Ç —É –ò–ò...")

    try:
        advice = get_gigachat_advice(user_id)
        if advice:
            await update.message.reply_text(
                f"üß† –°–æ–≤–µ—Ç –æ—Ç GigaChat:"
                f"\n\n{advice}")
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –≤ —ç—Ç–æ—Ç —Ä–∞–∑."
            )
    except DatabaseError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞ –¥–ª—è user %s: %s", user_id, e)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞."
        )


async def send_motivation(update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE) : –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    _ = context
    message = get_random_motivation()
    await update.message.reply_text(f"üöÄ {message}")


async def error_handler(
        update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

    Args:
        update (object): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤ —Ö–æ–¥–µ.
        context (ContextTypes.DEFAULT_TYPE) : –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    _ = context
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                 " –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è %s", update, exc_info=True)
